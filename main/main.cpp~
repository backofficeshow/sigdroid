/*

sigdroid The odroid-go signal / function generator

Hacked together by the BACKOFFICE crew

Chrissy
Dr A
Hopefully Sad Ken!

come talk to us on Discord details on www.youtube.com/backofficeshow

*/

#include "freertos/FreeRTOS.h"
#include "esp_system.h"
#include "esp_event.h"
#include "nvs_flash.h"
#include "esp_partition.h"
#include "driver/i2s.h"
#include "esp_spiffs.h"
#include "nvs_flash.h"
#include "esp_sleep.h"
#include "driver/rtc_io.h"
#include "esp_ota_ops.h"

extern "C"
{
#include "../components/odroid/odroid_settings.h"
#include "../components/odroid/odroid_audio.h"
#include "../components/odroid/odroid_input.h"
#include "../components/odroid/odroid_system.h"
#include "../components/odroid/odroid_display.h"
#include "../components/odroid/odroid_sdcard.h"

#include "../components/ugui/ugui.h"
}

#include <dirent.h>
#include <string.h>
#include <ctype.h>
#include <math.h>

#define ESP32_PSRAM (0x3f800000)

#define AUDIO_SAMPLE_RATE (44100)

QueueHandle_t vidQueue;

#define SIGDROID_WIDTH 160
#define SIGDROID_HEIGHT 250
uint8_t framebuffer[SIGDROID_WIDTH * SIGDROID_HEIGHT];
uint16_t pal16[256];
bool IsPal;

static int AudioSink = ODROID_AUDIO_SINK_DAC;

#define I2S_SAMPLE_RATE   (44100)
#define SAMPLERATE I2S_SAMPLE_RATE // Sample rate of our waveforms in Hz

#define AMPLITUDE     1000
#define WAV_SIZE      256
int32_t sine[WAV_SIZE]     = {0};

void generateSine(int32_t amplitude, int32_t* buffer, uint16_t length) {
  // Generate a sine wave signal with the provided amplitude and store it in
  // the provided buffer of size length.
  for (int i=0; i<length; ++i) {
    buffer[i] = int32_t(float(amplitude)*sin(2.0*M_PI*(1.0/length)*i));
  }
}

void playWave(int32_t* buffer, uint16_t length, float frequency, float seconds) {
  short outbuf[2];
  uint32_t iterations = seconds*SAMPLERATE;
  float delta = (frequency*length)/float(SAMPLERATE);
  odroid_audio_volume_set(ODROID_VOLUME_LEVEL4);
  for (uint32_t i=0; i<iterations; ++i) {
    uint16_t pos = uint32_t(i*delta) % length;
    int32_t sample = buffer[pos];
    outbuf[0] = sample;
    outbuf[1] = sample;
    odroid_audio_submit(outbuf, 1);
  }
  odroid_audio_volume_set(ODROID_VOLUME_LEVEL0);
  odroid_audio_submit(outbuf, 1);
  printf("DONE.\n");
}

void videoTask(void *arg)
{
    while(1)
    {
        uint8_t* param;
        xQueuePeek(vidQueue, &param, portMAX_DELAY);
        memcpy(framebuffer, param, sizeof(framebuffer));
        xQueueReceive(vidQueue, &param, portMAX_DELAY);

    }

    odroid_display_lock_sms_display();

    // Draw hourglass
    odroid_display_show_hourglass();

    odroid_display_unlock_sms_display();

    vTaskDelete(NULL);

    while (1) {}
}


UG_GUI gui;
uint16_t* fb;

static void pset(UG_S16 x, UG_S16 y, UG_COLOR color)
{
    fb[y * 320 + x] = color;
}

static void window1callback(UG_MESSAGE* msg)
{
}

static void UpdateDisplay()
{
    UG_Update();
    ili9341_write_frame_rectangleLE(0, 0, 320, 240, fb);
}

#define MAX_OBJECTS 20
#define ITEM_COUNT  10

UG_WINDOW window1;
UG_BUTTON button1;
UG_TEXTBOX textbox[ITEM_COUNT];
UG_OBJECT objbuffwnd1[MAX_OBJECTS];

void sigdroid_init(const char* filename)
{
    printf("%s: HEAP:0x%x (%#08x)\n",
      __func__,
      esp_get_free_heap_size(),
      heap_caps_get_free_size(MALLOC_CAP_DMA));

    const char* result = NULL;
    static const size_t MAX_DISPLAY_LENGTH = 38;

    fb = (uint16_t*)heap_caps_malloc(320 * 240 * 2, MALLOC_CAP_SPIRAM);
    if (!fb) abort();
    //fb = (uint16_t*)ESP32_PSRAM;

    UG_Init(&gui, pset, 320, 240);

    UG_WindowCreate(&window1, objbuffwnd1, MAX_OBJECTS, window1callback);

    UG_WindowSetTitleText(&window1, "sigDroid-go";
    UG_WindowSetTitleTextFont(&window1, &FONT_10X16);
    UG_WindowSetTitleTextAlignment(&window1, ALIGN_CENTER);

    UG_WindowShow(&window1);
    UpdateDisplay();

    odroid_gamepad_state previousState;
    odroid_input_gamepad_read(&previousState);

    int ll = 40;

    float frequency[] = {
      659.25511, 493.8833, 523.25113, 587.32954, 523.25113, 493.8833, 440.0, 440.0, 523.25113, 659.25511, 587.32954, 523.25113, 493.8833, 523.25113, 587.32954, 659.25511, 523.25113, 440.0, 440.0, 440.0, 493.8833, 523.25113, 587.32954, 698.45646, 880.0, 783.99087, 698.45646, 659.25511, 523.25113, 659.25511, 587.32954, 523.25113, 493.8833, 493.8833, 523.25113, 587.32954, 659.25511, 523.25113, 440.0, 440.0
    };

    float duration[] = {
        406.250, 203.125, 203.125, 406.250, 203.125, 203.125, 406.250, 203.125, 203.125, 406.250, 203.125, 203.125, 609.375, 203.125, 406.250, 406.250, 406.250, 406.250, 203.125, 203.125, 203.125, 203.125, 609.375, 203.125, 406.250, 203.125, 203.125, 609.375, 203.125, 406.250, 203.125, 203.125, 406.250, 203.125, 203.125, 406.250, 406.250, 406.250, 406.250, 406.250
    };

    while (true)
    {
		    odroid_gamepad_state state;
		    odroid_input_gamepad_read(&state);

        if (!previousState.values[ODROID_INPUT_MENU] && state.values[ODROID_INPUT_MENU])
        {
            esp_restart();
        }else if (!previousState.values[ODROID_INPUT_A] && state.values[ODROID_INPUT_A])
        {
            printf("PLAY WAVE 1\n");
            for (int i=0; i < ll; i++){
              //playWave(1000, frequency[i], (duration[i]/1000)); //5 KHz test
              playWave2(sine, WAV_SIZE, frequency[i], (duration[i]/1000));

            }
        }else if (!previousState.values[ODROID_INPUT_B] && state.values[ODROID_INPUT_B])
        {
            printf("PLAY WAVE 2\n");
            playWave2(sine, WAV_SIZE, 2000, 2);

        }else if (!previousState.values[ODROID_INPUT_VOLUME] && state.values[ODROID_INPUT_VOLUME])
        {
          odroid_audio_terminate();
          if (AudioSink == ODROID_AUDIO_SINK_DAC){
            AudioSink = ODROID_AUDIO_SINK_SPEAKER;
            odroid_audio_init(ODROID_AUDIO_SINK_SPEAKER, AUDIO_SAMPLE_RATE);
          }else if (AudioSink == ODROID_AUDIO_SINK_SPEAKER){
            AudioSink = ODROID_AUDIO_SINK_DAC;
            odroid_audio_init(ODROID_AUDIO_SINK_DAC, AUDIO_SAMPLE_RATE);
          }
          odroid_audio_volume_set(ODROID_VOLUME_LEVEL0);
        }

        previousState = state;
        vTaskDelay(10 / portTICK_PERIOD_MS);
    }

}

void sigdroid_step(odroid_gamepad_state* gamepad)
{

}

bool RenderFlag;
extern "C" void app_main()
{
    printf("sigdroid-go started.\n");

    printf("HEAP:0x%x (%#08x)\n",
      esp_get_free_heap_size(),
      heap_caps_get_free_size(MALLOC_CAP_DMA));


    nvs_flash_init();

    odroid_system_init();
    odroid_input_gamepad_init();
    odroid_input_battery_level_init();

    ili9341_prepare();

    ili9341_init();
    ili9341_clear(0x0000);

    generateSine(AMPLITUDE, sine, WAV_SIZE);

    //vTaskDelay(500 / portTICK_RATE_MS);

    // Open SD card
    esp_err_t r = odroid_sdcard_open(SD_BASE_PATH);
    if (r != ESP_OK)
    {
        odroid_display_show_sderr(ODROID_SD_ERR_NOCARD);
        abort();
    }


    //const char* romfile = ChooseFile();
    const char* romfile = "TEST";
    //printf("%s: filename='%s'\n", __func__, romfile);


    ili9341_clear(0x0000);

    odroid_audio_init(ODROID_AUDIO_SINK_DAC, AUDIO_SAMPLE_RATE);
    odroid_audio_volume_set(ODROID_VOLUME_LEVEL0);

    sigdroid_init(romfile);


    vidQueue = xQueueCreate(1, sizeof(uint16_t*));
    xTaskCreatePinnedToCore(&videoTask, "videoTask", 1024 * 4, NULL, 5, NULL, 1);


    uint startTime;
    uint stopTime;
    uint totalElapsedTime = 0;
    int frame = 0;
    int renderFrames = 0;
    uint16_t muteFrameCount = 0;
    uint16_t powerFrameCount = 0;

    odroid_gamepad_state last_gamepad;
    odroid_input_gamepad_read(&last_gamepad);

    static const bool renderTable[8] = {
        true, false,
        false, true,
        true, false,
        false, true };

    while(1)
    {
        startTime = xthal_get_ccount();


        odroid_gamepad_state gamepad;
        odroid_input_gamepad_read(&gamepad);

        if (last_gamepad.values[ODROID_INPUT_MENU] &&
            !gamepad.values[ODROID_INPUT_MENU])
        {
            esp_restart();
        }

        if (!last_gamepad.values[ODROID_INPUT_VOLUME] &&
            gamepad.values[ODROID_INPUT_VOLUME])
        {
            odroid_audio_volume_change();
            printf("%s: Volume=%d\n", __func__, odroid_audio_volume_get());
        }


        RenderFlag = renderTable[frame & 7];
        sigdroid_step(&gamepad);
        //printf("stepped.\n");


        if (RenderFlag)
        {
            //TIA& tia = console->tia();
            //uint8_t* fb = tia.currentFrameBuffer();

            //xQueueSend(vidQueue, &fb, portMAX_DELAY);

            ++renderFrames;
        }

        last_gamepad = gamepad;


        // end of frame
        stopTime = xthal_get_ccount();


        odroid_battery_state battery;
        odroid_input_battery_level_read(&battery);


        int elapsedTime;
        if (stopTime > startTime)
          elapsedTime = (stopTime - startTime);
        else
          elapsedTime = ((uint64_t)stopTime + (uint64_t)0xffffffff) - (startTime);

        totalElapsedTime += elapsedTime;
        ++frame;

        if (frame == 60)
        {
          float seconds = totalElapsedTime / (CONFIG_ESP32_DEFAULT_CPU_FREQ_MHZ * 1000000.0f);
          float fps = frame / seconds;
          float renderFps = renderFrames / seconds;

          printf("HEAP:0x%x (%#08x), SIM:%f, REN:%f, BATTERY:%d [%d]\n",
            esp_get_free_heap_size(),
            heap_caps_get_free_size(MALLOC_CAP_DMA),
            fps,
            renderFps,
            battery.millivolts,
            battery.percentage);

          frame = 0;
          renderFrames = 0;
          totalElapsedTime = 0;
        }
    }
}

